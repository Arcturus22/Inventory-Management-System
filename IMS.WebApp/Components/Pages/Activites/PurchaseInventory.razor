@page "/purchase"
@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

@inject IViewInventoriesByNameUseCase _viewInventoriesByNameUseCase;
@inject IViewInventoryByIdUseCase _viewInventoryByIdUseCase;
@inject IPurchaseInventoryUseCase _purchaseInventoryUseCase;

<h3>Purchase Inventory</h3>
<br />

<EditForm id="purchase-form" Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator />
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="poNumber"> Purchase Order #</label>
        <InputText id="poNumber" @bind-Value="purchaseViewModel.poNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">

            <div class="form-group">
                <AutoCompleteComponent Label="Inventory to Purchase"
                                       SearchFunction="SearchInventoryAsync"
                                       OnItemSelected="HandleItemSelected">
                </AutoCompleteComponent>

                @if (purchaseViewModel.InventoryPrice > 0)
                {
                    <text> Price:</text>
                    @purchaseViewModel.InventoryPrice.ToString("C")
                }
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>

    <br />

    <button type="submit" class="btn btn-primary">Purchase</button>

</EditForm>






@code {
    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();

    private Inventory? selectedInventory = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "purchase-form");
        }
    }

    private async Task<List<ItemViewModel>?> SearchInventoryAsync(string name)
    {
        var list = await _viewInventoriesByNameUseCase.ExecuteAsync(name);
        if (list is null)
            return null;

        return list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName }).ToList();

    }

    private async Task HandleItemSelected(ItemViewModel item)
    {
        selectedInventory = (await _viewInventoryByIdUseCase.ExecuteAsync(item.Id));
        this.purchaseViewModel.InventoryId = item.Id;
        this.purchaseViewModel.InventoryPrice = selectedInventory.Price;

    }

    private async Task Purchase()
    {
        await _purchaseInventoryUseCase.ExecuteAsync(
            this.purchaseViewModel.poNumber,
            selectedInventory,
            this.purchaseViewModel.QuantityToPurchase,
            "BLAKE"
        );

        purchaseViewModel = new PurchaseViewModel();
        selectedInventory = null;

    }


}
