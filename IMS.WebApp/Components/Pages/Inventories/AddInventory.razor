@page "/inventories/add"

@inject IAddInventoryUseCase _AddInventoryUseCase;
@inject NavigationManager _NavigationManager

<h3>Add Inventory</h3>
<br />

<EditForm Model="inventory" FormName="formInventory" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group pb-3">
        <label for="name"> Inventory Name</label>
        <InputText id="name"
                   @bind-Value="inventory.InventoryName"
                   class="form-control">
        </InputText>
        <ValidationMessage For="@(() => inventory.InventoryName)" class="text-danger" />
    </div>

    <div class="form-group pb-3">
        <label for="quantity"> Quantity </label>
        <InputNumber id="quantity"
                     @bind-Value="inventory.Quantity"
                     class="form-control">
        </InputNumber>
        <ValidationMessage For="@(() => inventory.Quantity)" class="text-danger" />
    </div>

    <div class="form-group pb-3">
        <label for="price"> Price </label>
        <InputNumber id="price"
                     @bind-Value="inventory.Price"
                     class="form-control">
        </InputNumber>
        <ValidationMessage For="@(() => inventory.Price)" class="text-danger" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary"> Save </button>
    <NavLink class="btn btn-primary mx-2" href="/inventories/list"> Cancel </NavLink>
</EditForm>



@code {
    [SupplyParameterFromForm]
    private Inventory inventory { get; set; } = new Inventory();

    private async Task SaveAsync()
    {
        await _AddInventoryUseCase.ExecuteAsync(inventory);

        _NavigationManager.NavigateTo("/inventories/list");
    }


}
