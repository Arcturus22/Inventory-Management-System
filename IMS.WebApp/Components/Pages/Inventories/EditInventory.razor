@page "/inventories/edit/{InvId:int}"
@using IMS.UseCases.PluginInterfaces
@inject IViewInventoryByIdUseCase _viewInventoryByIdUseCase
@inject IEditInventoryUseCase _editInventoryUseCase
@inject NavigationManager _navigationManager

<h3>EditInventory</h3>
<br />

@if (inventory is not null)
{

    <EditForm Model="inventory" FormName="formInventory" OnValidSubmit="UpdateAsync">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <InputNumber id="id" @bind-Value="inventory.InventoryId" class="form-control" hidden="true" />

        <div class="form-group pb-3">
            <label for="name"> Inventory Name</label>
            <InputText id="name"
                       @bind-Value="inventory.InventoryName"
                       class="form-control">
            </InputText>
            <ValidationMessage For="@(() => inventory.InventoryName)" class="text-danger" />
        </div>

        <div class="form-group pb-3">
            <label for="quantity"> Quantity </label>
            <InputNumber id="quantity"
                         @bind-Value="inventory.Quantity"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="@(() => inventory.Quantity)" class="text-danger" />
        </div>

        <div class="form-group pb-3">
            <label for="price"> Price </label>
            <InputNumber id="price"
                         @bind-Value="inventory.Price"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="@(() => inventory.Price)" class="text-danger" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary"> Update </button>
        <NavLink class="btn btn-primary mx-2" href="/inventories/list"> Cancel </NavLink>
    </EditForm>
}


@code {

    [Parameter] public int InvId { get; set; }

    [SupplyParameterFromForm]
    private Inventory? inventory { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // Here we are calling the use case repository to get the inventory by Id
        // We are not using the _inventoryRepository directly in this component like we could
        // just directly call the method, but we are using the use case to keep the separation of concerns
        inventory ??= await _viewInventoryByIdUseCase.ExecuteAsync(InvId);


    }
    private async Task UpdateAsync(EditContext args)
    {
        if (inventory is not null)
        {
            await _editInventoryUseCase.ExecuteAsync(inventory);
            _navigationManager.NavigateTo("/inventories/list");
        }
    }
}
