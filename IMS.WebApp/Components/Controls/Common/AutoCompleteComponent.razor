
<div class="form-group">
    <label for="search">@Label</label>

    <input type="text"
           class="form-control"
           @bind-value="userInput"
           @bind-value:event="oninput"
           @onkeyup="OnKeyUp" />
</div>

@if (searchResults?.Any() == true)
{
    <div class="search-result">

        <ul>
            @{
                int itemIndex = 0;
                foreach (var item in searchResults)
                {
                    <li @key="item.Id"
                        class="@(itemIndex == currentItemIndex ? "selected" : "")"
                        @onclick="() => HandleSelectItem(item)">
                        @item.Name
                    </li>
                    itemIndex++;
                }
            }
        </ul>
    </div>
}

@code {
    [Parameter] public string Label { get; set; } = string.Empty;

    // Function Delegate - A fucntion Pointer that has string as input and returns a list of ItemViewModel
    [Parameter]
    public Func<string, Task<List<ItemViewModel>>>? SearchFunction { get; set; }

    [Parameter] public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    private List<ItemViewModel>? searchResults = null;
    private ItemViewModel? selectedItem = null;

    private string _userInput = string.Empty;
    public string userInput
    {
        get => _userInput;
        set
        {
            _userInput = value;
            if (!string.IsNullOrEmpty(_userInput) && SearchFunction != null)
            {
                // Call the SearchFunction with the user input and get the results
                ViewItemsAsync();
            }
        }
    }

    private ItemViewModel? currentItem = null;
    private int currentItemIndex = -1;

    private async Task ViewItemsAsync()
    {
        if(SearchFunction != null)
        {
            searchResults = await SearchFunction(_userInput);

            StateHasChanged(); // Refresh the component to show search results
        }
    }

    private void HandleSelectItem(ItemViewModel item)
    {
        ClearHighlighting();

        if (item != null)
        {
            this.selectedItem = item;
            this.userInput = item?.Name ?? string.Empty;
            this.searchResults = null; // Clear search results after selection

            OnItemSelected.InvokeAsync(item); // Invoke the callback with the selected item
        }
    }

    private void ClearHighlighting()
    {
        searchResults = null; // Clear search results
        currentItem = null;
        currentItemIndex = -1;
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        if (searchResults?.Any() == true && (e.Code == "ArrowDown" || e.Code == "ArrowUp"))
        {
            if (e.Code == "ArrowDown" && currentItemIndex < searchResults.Count - 1)
            {
                currentItem = searchResults[++currentItemIndex];
            }
            else if (e.Code == "ArrowUp" && currentItemIndex > 0)
            {
                currentItem = searchResults[--currentItemIndex];
            }
        }
        else if (currentItem != null && (e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            HandleSelectItem(currentItem);
        }
        else if (e.Code == "Escape")
        {
            ClearHighlighting();
        }
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }


}
