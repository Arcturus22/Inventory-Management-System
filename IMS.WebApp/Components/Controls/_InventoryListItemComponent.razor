@inject IDeleteInventoryUseCase _DeleteInventoryUseCase
@inject NavigationManager _navigationManager

@if (this.Inventory is not null)
{
    <tr>

        <td>@Inventory.InventoryName</td>
        <td>@Inventory.Quantity</td>
        <td>@Inventory.Price.ToString("c")</td>
        <td>
            <a href="/inventories/edit/@Inventory.InventoryId"
                     class="btn btn-light">
                Edit
            </a>

        </td>
        <td>
            <EditForm Enhance="true" Model="Inventory"
                FormName="@($"form-delete-inventory-{Inventory.InventoryId}")"
                      OnValidSubmit="()=>DeleteInventory(Inventory.InventoryId)">

                <button type="submit" class="btn btn-light">Delete</button>
            </EditForm>
        </td>
    </tr>
}

@code {
    [Parameter] public Inventory? Inventory { get; set; }

    private async Task DeleteInventory(int inventoryId)
    {
        await _DeleteInventoryUseCase.ExecuteAsync(inventoryId);
        _navigationManager.Refresh();
    }


}
